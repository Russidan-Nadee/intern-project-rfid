import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:lucide_icons/lucide_icons.dart';

class DashboardPageMock extends StatelessWidget {
  const DashboardPageMock({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Scaffold(
      appBar: AppBar(
        title: const Text('Dashboard Overview'),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'üè† Overview (‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°)',
                  style: theme.textTheme.titleLarge,
                ),
                DropdownButton<String>(
                  value: '7 ‡∏ß‡∏±‡∏ô',
                  items: ['‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ', '7 ‡∏ß‡∏±‡∏ô', '30 ‡∏ß‡∏±‡∏ô'].map((e) {
                    return DropdownMenuItem(value: e, child: Text(e));
                  }).toList(),
                  onChanged: (v) {},
                ),
              ],
            ),
            const SizedBox(height: 12),
            Wrap(
              spacing: 12,
              runSpacing: 12,
              children: const [
                _SummaryCard(
                  icon: LucideIcons.boxes,
                  label: '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                  value: '1,240',
                  subtext: '+5% YoY',
                  valueColor: Colors.green,
                ),
                _SummaryCard(
                  icon: LucideIcons.badgeCheck,
                  label: '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà',
                  value: '1,100',
                  subtext: '89% Utilization',
                  valueColor: Colors.green,
                ),
                _SummaryCard(
                  icon: LucideIcons.badgeX,
                  label: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                  value: '140',
                  subtext: '11% Idle Assets',
                  valueColor: Colors.red,
                ),
                _SummaryCard(
                  icon: LucideIcons.packagePlus,
                  label: '‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÉ‡∏´‡∏°‡πà (‡∏õ‡∏µ‡∏ô‡∏µ‡πâ)',
                  value: '320',
                  subtext: '+18% YoY',
                  valueColor: Colors.green,
                ),
              ],
            ),
            const SizedBox(height: 24),
            _DashboardCard(
              title: 'üè¢ ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å',
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  SizedBox(
                    height: 200,
                    child: PieChart(
                      PieChartData(
                        sections: [
                          PieChartSectionData(
                            value: 45,
                            title: 'IT',
                            color: Colors.blue,
                          ),
                          PieChartSectionData(
                            value: 30,
                            title: '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô',
                            color: Colors.orange,
                          ),
                          PieChartSectionData(
                            value: 15,
                            title: 'Logistics',
                            color: Colors.green,
                          ),
                          PieChartSectionData(
                            value: 10,
                            title: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
                            color: Colors.grey,
                          ),
                        ],
                        sectionsSpace: 4,
                        centerSpaceRadius: 30,
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  const Text('‚Ä¢ IT ‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (45%)'),
                  const Text('‚Ä¢ ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏á‡∏•‡∏á‡∏°‡∏≤ (30%) ‚Üí ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï'),
                  const Text('‚Üí ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ROI ‡πÅ‡∏¢‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏õ‡∏µ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'),
                ],
              ),
            ),
            const SizedBox(height: 24),
            _DashboardCard(
              title: 'üìà ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å',
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        '‡πÅ‡∏ú‡∏ô‡∏Å:',
                        style: TextStyle(fontWeight: FontWeight.w500),
                      ),
                      DropdownButton<String>(
                        value: 'IT',
                        items: ['IT', '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô', 'Logistics', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ'].map((
                          dept,
                        ) {
                          return DropdownMenuItem(
                            value: dept,
                            child: Text(dept),
                          );
                        }).toList(),
                        onChanged: (v) {},
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  SizedBox(
                    height: 200,
                    child: LineChart(
                      LineChartData(
                        gridData: FlGridData(show: true),
                        titlesData: FlTitlesData(
                          leftTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              reservedSize: 50,
                              getTitlesWidget: (value, meta) {
                                return Text('${value.toInt()}%');
                              },
                            ),
                          ),
                          bottomTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              getTitlesWidget: (value, meta) {
                                const months = [
                                  '‡∏°.‡∏Ñ.',
                                  '‡∏Å.‡∏û.',
                                  '‡∏°‡∏µ.‡∏Ñ.',
                                  '‡πÄ‡∏°.‡∏¢.',
                                  '‡∏û.‡∏Ñ.',
                                  '‡∏°‡∏¥.‡∏¢.',
                                ];
                                if (value.toInt() < months.length) {
                                  return Text(months[value.toInt()]);
                                }
                                return const Text('');
                              },
                            ),
                          ),
                          rightTitles: AxisTitles(
                            sideTitles: SideTitles(showTitles: false),
                          ),
                          topTitles: AxisTitles(
                            sideTitles: SideTitles(showTitles: false),
                          ),
                        ),
                        borderData: FlBorderData(show: true),
                        lineBarsData: [
                          LineChartBarData(
                            spots: const [
                              FlSpot(0, 5), // ‡∏°.‡∏Ñ. +5%
                              FlSpot(1, 8), // ‡∏Å.‡∏û. +8%
                              FlSpot(2, 12), // ‡∏°‡∏µ.‡∏Ñ. +12%
                              FlSpot(3, 18), // ‡πÄ‡∏°.‡∏¢. +18%
                              FlSpot(4, 15), // ‡∏û.‡∏Ñ. +15%
                              FlSpot(5, 22), // ‡∏°‡∏¥.‡∏¢. +22%
                            ],
                            isCurved: true,
                            color: Colors.blue,
                            barWidth: 3,
                            dotData: FlDotData(show: true),
                            belowBarData: BarAreaData(
                              show: true,
                              color: Colors.blue.withOpacity(0.1),
                            ),
                          ),
                        ],
                        minX: 0,
                        maxX: 5,
                        minY: 0,
                        maxY: 25,
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  const Text('‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏Å IT ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï 22% ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏õ‡∏µ‡πÅ‡∏£‡∏Å'),
                  const Text(
                    '‚Ä¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Digital Transformation',
                  ),
                  const Text('‚Üí ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï 40% ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏õ‡∏µ'),
                ],
              ),
            ),
            const SizedBox(height: 24),
            _DashboardCard(
              title: 'üè≠ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£',
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        '‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà:',
                        style: TextStyle(fontWeight: FontWeight.w500),
                      ),
                      DropdownButton<String>(
                        value: 'Curing Oven Area',
                        items:
                            [
                              'Curing Oven Area',
                              'E-Coat Line 1',
                              'Maintenance Workshop',
                              'Phosphating Line 1',
                              'Pre-Treatment Section',
                              'Paint Spray Booth 1',
                              'Quality Control Lab',
                              'Wastewater Treatment',
                            ].map((location) {
                              return DropdownMenuItem(
                                value: location,
                                child: Text(location),
                              );
                            }).toList(),
                        onChanged: (v) {},
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),
                  SizedBox(
                    height: 200,
                    child: LineChart(
                      LineChartData(
                        gridData: FlGridData(show: true),
                        titlesData: FlTitlesData(
                          leftTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              reservedSize: 50,
                              getTitlesWidget: (value, meta) {
                                return Text('${value.toInt()}%');
                              },
                            ),
                          ),
                          bottomTitles: AxisTitles(
                            sideTitles: SideTitles(
                              showTitles: true,
                              getTitlesWidget: (value, meta) {
                                const months = [
                                  '‡∏°.‡∏Ñ.',
                                  '‡∏Å.‡∏û.',
                                  '‡∏°‡∏µ.‡∏Ñ.',
                                  '‡πÄ‡∏°.‡∏¢.',
                                  '‡∏û.‡∏Ñ.',
                                  '‡∏°‡∏¥.‡∏¢.',
                                ];
                                if (value.toInt() < months.length) {
                                  return Text(months[value.toInt()]);
                                }
                                return const Text('');
                              },
                            ),
                          ),
                          rightTitles: AxisTitles(
                            sideTitles: SideTitles(showTitles: false),
                          ),
                          topTitles: AxisTitles(
                            sideTitles: SideTitles(showTitles: false),
                          ),
                        ),
                        borderData: FlBorderData(show: true),
                        lineBarsData: [
                          LineChartBarData(
                            spots: const [
                              FlSpot(0, 8), // ‡∏°.‡∏Ñ. +8%
                              FlSpot(1, 12), // ‡∏Å.‡∏û. +12%
                              FlSpot(2, 15), // ‡∏°‡∏µ.‡∏Ñ. +15%
                              FlSpot(3, 11), // ‡πÄ‡∏°.‡∏¢. +11%
                              FlSpot(4, 18), // ‡∏û.‡∏Ñ. +18%
                              FlSpot(5, 25), // ‡∏°‡∏¥.‡∏¢. +25%
                            ],
                            isCurved: true,
                            color: Colors.purple,
                            barWidth: 3,
                            dotData: FlDotData(show: true),
                            belowBarData: BarAreaData(
                              show: true,
                              color: Colors.purple.withOpacity(0.1),
                            ),
                          ),
                        ],
                        minX: 0,
                        maxX: 5,
                        minY: 0,
                        maxY: 30,
                      ),
                    ),
                  ),
                  const SizedBox(height: 12),
                  const Text(
                    '‚Ä¢ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà Curing Oven ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï 25% ‡πÉ‡∏ô‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏õ‡∏µ‡πÅ‡∏£‡∏Å',
                  ),
                  const Text('‚Ä¢ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏ï‡∏≤‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ú‡∏•‡∏¥‡∏ï'),
                  const Text(
                    '‚Üí ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÉ‡∏´‡∏°‡πà 2 ‡∏ä‡∏∏‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ 4',
                  ),
                ],
              ),
            ),

            const SizedBox(height: 24),
            _DashboardCard(
              title: 'üìã ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ',
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      const Text(
                        '‡πÅ‡∏ú‡∏ô‡∏Å:',
                        style: TextStyle(fontWeight: FontWeight.w500),
                      ),
                      DropdownButton<String>(
                        value: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                        items: ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', 'IT', '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô', 'Logistics', '‡∏≠‡∏∑‡πà‡∏ô‡πÜ']
                            .map((dept) {
                              return DropdownMenuItem(
                                value: dept,
                                child: Text(dept),
                              );
                            })
                            .toList(),
                        onChanged: (v) {
                          // Handle department change
                        },
                      ),
                    ],
                  ),
                  const SizedBox(height: 20),

                  // Progress Circle
                  Center(
                    child: Stack(
                      alignment: Alignment.center,
                      children: [
                        SizedBox(
                          width: 120,
                          height: 120,
                          child: CircularProgressIndicator(
                            value: 0.28, // 28%
                            strokeWidth: 12,
                            backgroundColor: Colors.grey.shade200,
                            valueColor: const AlwaysStoppedAnimation<Color>(
                              Colors.orange,
                            ),
                          ),
                        ),
                        Column(
                          children: const [
                            Text(
                              '28%',
                              style: TextStyle(
                                fontSize: 24,
                                fontWeight: FontWeight.bold,
                                color: Colors.orange,
                              ),
                            ),
                            Text(
                              '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                              style: TextStyle(
                                fontSize: 12,
                                color: Colors.grey,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),

                  const SizedBox(height: 20),

                  // Progress Details
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      Column(
                        children: const [
                          Text(
                            '350',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.green,
                            ),
                          ),
                          Text(
                            '‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß',
                            style: TextStyle(fontSize: 12, color: Colors.grey),
                          ),
                        ],
                      ),
                      Container(
                        width: 1,
                        height: 40,
                        color: Colors.grey.shade300,
                      ),
                      Column(
                        children: const [
                          Text(
                            '890',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.orange,
                            ),
                          ),
                          Text(
                            '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à',
                            style: TextStyle(fontSize: 12, color: Colors.grey),
                          ),
                        ],
                      ),
                      Container(
                        width: 1,
                        height: 40,
                        color: Colors.grey.shade300,
                      ),
                      Column(
                        children: const [
                          Text(
                            '1,240',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.blue,
                            ),
                          ),
                          Text(
                            '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                            style: TextStyle(fontSize: 12, color: Colors.grey),
                          ),
                        ],
                      ),
                    ],
                  ),

                  const SizedBox(height: 16),
                  const Text('‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° 28% ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ'),
                  const Text('‚Ä¢ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ 3'),
                  const Text(
                    '‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 15% ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏±‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢',
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _SummaryCard extends StatelessWidget {
  final IconData icon;
  final String label;
  final String value;
  final String? subtext;
  final Color? valueColor;

  const _SummaryCard({
    required this.icon,
    required this.label,
    required this.value,
    this.subtext,
    this.valueColor,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Container(
      width: 160,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.cardColor,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black12,
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Icon(icon, size: 28, color: theme.primaryColor),
          const SizedBox(height: 12),
          Text(
            value,
            style: theme.textTheme.headlineSmall?.copyWith(color: valueColor),
          ),
          if (subtext != null)
            Text(
              subtext!,
              style: theme.textTheme.bodySmall?.copyWith(color: valueColor),
            ),
          const SizedBox(height: 4),
          Text(label, style: theme.textTheme.bodyMedium),
        ],
      ),
    );
  }
}

class _DashboardCard extends StatelessWidget {
  final String title;
  final Widget child;

  const _DashboardCard({required this.title, required this.child});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: theme.cardColor,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(color: Colors.grey.shade200),
        boxShadow: [
          BoxShadow(
            color: Colors.black12,
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(title, style: theme.textTheme.titleMedium),
          const SizedBox(height: 12),
          child,
        ],
      ),
    );
  }
}


// ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å

// Pie Chart (‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏á‡∏Å‡∏•‡∏°): ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å

// Bar Chart (‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á): ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å

// Treemap Chart: ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏¢‡πà‡∏≠‡∏¢

// Stacked Bar Chart: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡∏¢‡πà‡∏≠‡∏¢‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å

// ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å / ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£

// Line Chart (‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô): ‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤

// Bar Chart (‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á): ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï ‡∏ì ‡∏à‡∏∏‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ

// Area Chart: ‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å

// Combo Chart (Line + Bar): ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô

// ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ

// Circular Progress Indicator (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤): ‡πÅ‡∏™‡∏î‡∏á % ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î

// Bar Chart (‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á): ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏á‡∏≤‡∏ô‡∏¢‡πà‡∏≠‡∏¢

// Gauge Chart (‡∏°‡∏≤‡∏ï‡∏£‡∏ß‡∏±‡∏î): ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πá‡∏°‡∏ä‡∏µ‡πâ

// Bullet Chart: ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô

// Progress Bar (‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤): ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏™‡∏î‡∏á % ‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à